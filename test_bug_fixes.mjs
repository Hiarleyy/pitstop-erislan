import { readFileSync } from 'fs';

// Carregar dados dos servi√ßos
const servicesData = JSON.parse(readFileSync('./src/data/services.json', 'utf-8'));

// Fun√ß√£o auxiliar para converter pre√ßos string para number
const convertPrice = (priceStr) => {
  let cleanStr = priceStr.replace(/R\$\s*/g, '').trim();
  cleanStr = cleanStr.replace(/\./g, '');
  cleanStr = cleanStr.replace(',', '.');
  return parseFloat(cleanStr) || 0;
};

// Fun√ß√£o para formatar pre√ßo em moeda brasileira
const formatPrice = (value) => {
  return value.toLocaleString('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  });
};

// Fun√ß√£o para obter categorias de servi√ßos
const getServiceCategories = () => {
  const categories = {};
  
  const categoryMap = {
    servicos_adicionais_moto: {
      name: "Adicionais Motos", 
      description: "Servi√ßos adicionais para motocicletas"
    }
  };

  // Inicializar categoria
  Object.entries(categoryMap).forEach(([key, config]) => {
    categories[key] = {
      name: config.name,
      description: config.description,
      services: []
    };
  });

  // Processar servi√ßos do JSON
  servicesData.forEach((service) => {
    const categoryKey = service.categoria;
    
    if (categories[categoryKey]) {
      let prices;
      
      if (service.precos) {
        if (service.precos.valor_fixo) {
          const fixedPrice = convertPrice(service.precos.valor_fixo);
          prices = {
            Pequeno: fixedPrice,
            M√©dio: fixedPrice,
            Grande: fixedPrice
          };
        } else if (service.precos.a_partir_de) {
          const basePrice = convertPrice(service.precos.a_partir_de);
          prices = {
            Pequeno: basePrice,
            M√©dio: basePrice,
            Grande: basePrice
          };
        }
      }

      categories[categoryKey].services.push({
        id: service.id || service.titulo.toLowerCase().replace(/\s+/g, '-'),
        name: service.titulo,
        description: service.descricao,
        prices: prices
      });
    }
  });

  return categories;
};

console.log('üîß TESTE DE CORRE√á√ïES DOS BUGS\n');

// Test 1: Verificar se os servi√ßos adicionais de moto t√™m pre√ßos
console.log('üìä TESTE 1: Verificando pre√ßos dos Adicionais Motos');
const categories = getServiceCategories();
const adicionalMotos = categories['servicos_adicionais_moto'];

if (adicionalMotos) {
  console.log(`‚úÖ Categoria "Adicionais Motos" encontrada: ${adicionalMotos.name}`);
  console.log(`üìã Quantidade de servi√ßos: ${adicionalMotos.services.length}`);
  
  adicionalMotos.services.forEach((service, index) => {
    console.log(`\n${index + 1}. ${service.name}`);
    console.log(`   Pre√ßos: ${JSON.stringify(service.prices)}`);
    
    // Testar c√°lculo de pre√ßo
    if (service.prices) {
      try {
        const firstPrice = Object.values(service.prices)[0];
        console.log(`   Pre√ßo calculado: ${formatPrice(firstPrice)}`);
      } catch (error) {
        console.log(`   ‚ùå Erro no c√°lculo: ${error.message}`);
      }
    } else {
      console.log(`   ‚ùå SEM PRE√áOS!`);
    }
  });
} else {
  console.log('‚ùå Categoria "Adicionais Motos" n√£o encontrada!');
}

// Test 2: Verificar estrutura dos dados originais
console.log('\nüìã TESTE 2: Verificando dados originais dos Adicionais Motos');
const rawAdicionaisMotos = servicesData.filter(service => service.categoria === 'servicos_adicionais_moto');

console.log(`üî¢ Total de servi√ßos adicionais de moto no JSON: ${rawAdicionaisMotos.length}`);
rawAdicionaisMotos.forEach((service, index) => {
  console.log(`${index + 1}. ${service.titulo} - Pre√ßos: ${JSON.stringify(service.precos)}`);
});

console.log('\n‚úÖ TESTE CONCLU√çDO');
